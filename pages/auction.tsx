import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Auction.module.css';
import React, { useState, useEffect } from 'react';
import { ToastContainer, toast, Zoom } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { config } from '@fortawesome/fontawesome-svg-core';
import '@fortawesome/fontawesome-svg-core/styles.css';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faCircleQuestion } from '@fortawesome/free-solid-svg-icons';

config.autoAddCss = false;

const Auction: NextPage = () => {
  //인원수(Headcount)
  const [hc, setHc] = useState(8);

  //경매장 판매가
  const [price, setPrice] = useState(0);

  //손익분기점(Break-Even Point), 초과 입찰시 손해
  const [bep, setBep] = useState(0);
  //손익분기점 직전의 입찰직전가
  const [profit, setProfit] = useState(0);
  //추천가(Recommend, 이익이 많이 남는 입찰가보다 소폭 높은 가격으로, 추가 입찰시 손해)
  const [rec, setRec] = useState(0);

  //손익분기점 값
  const [bepValue, setBepValue] = useState('0');
  //입찰직전가 값
  const [profitValue, setProfitValue] = useState('0');
  //추천가 값
  const [recValue, setRecValue] = useState('0');

  useEffect(() => {
    //인원수가 1명 이하일 경우, 모든 value 를 0으로 초기화
    if (hc <= 1) {
      setBep(0);
      setProfit(0);
      setRec(0);
    } else {
      //판매 수수료를 제외한 순수익(Net Income)
      const netIncome = price * 0.95;
      const breakEvenPoint = netIncome - netIncome / hc;
      setBep(Math.round(breakEvenPoint));
      setProfit(Math.round(breakEvenPoint / 1.1));
      setRec(Math.ceil(breakEvenPoint / 1.1 / 10) * 10);
    }
  }, [price, hc]);

  useEffect(() => {
    if (price === 0) {
      setBepValue('0');
      setProfitValue('0');
      setRecValue('0');
    } else {
      if (bep < 50) {
        setBepValue('입찰하는 것이 손해입니다.');
      } else {
        setBepValue(String(bep));
      }
      if (profit < 50) {
        setProfitValue('직전입찰가 입력이 불가능합니다.');
      } else {
        setProfitValue(String(profit));
      }
      if (rec < 50) {
        setRecValue('입찰선점가 입력이 불가능합니다.');
      } else {
        setRecValue(String(rec));
      }
    }
  }, [bep, profit, rec]);

  const changeValue = (event: React.ChangeEvent<HTMLInputElement>) => {
    const numberValue = Number(event.target.value);
    if (numberValue !== NaN) {
      setPrice(numberValue);
    }
  };

  const clearValue = () => {
    setPrice(0);
    setProfit(0);
    setRec(0);
  };

  const notify = () =>
    toast.info('클립보드에 복사 되었습니다.', {
      position: 'bottom-center',
      theme: 'dark',
      autoClose: 2200,
      transition: Zoom,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      pauseOnFocusLoss: false,
      draggable: true,
      progress: '',
    });

  return (
    <div className={styles.container}>
      <div className={styles.box}>
        <Head>
          <title>LostArk Calculator</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <div className={styles.hc_button_container}>
          <button
            className={hc === 4 ? styles.hc_selected_button : styles.hc_button}
            onClick={() => setHc(4)}
          >
            4人
          </button>
          <button
            className={hc === 8 ? styles.hc_selected_button : styles.hc_button}
            onClick={() => setHc(8)}
          >
            8人
          </button>
          <button
            className={hc === 16 ? styles.hc_selected_button : styles.hc_button}
            onClick={() => setHc(16)}
          >
            16人
          </button>
          <input
            type="number"
            max="30"
            placeholder="인원수 직접입력"
            className={styles.hc_input}
            onChange={(event) => {
              if (event.target.value) {
                setHc(Number(event.target.value));
              }
            }}
          />
        </div>

        <div className={styles.value_button_container}>
          <button
            className={styles.value_button}
            onClick={() => setPrice(price + 5000)}
          >
            + 5000
          </button>
          <button
            className={styles.value_button}
            onClick={() => setPrice(price + 1000)}
          >
            + 1000
          </button>
          <button
            className={styles.value_button}
            onClick={() => setPrice(price + 500)}
          >
            + 500
          </button>
          <button
            className={styles.value_button}
            onClick={() => setPrice(price + 100)}
          >
            + 100
          </button>
          <button
            className={styles.value_button}
            onClick={() => setPrice(price + 50)}
          >
            + 50
          </button>
          <button
            className={styles.value_button}
            onClick={() => setPrice(price + 10)}
          >
            + 10
          </button>
        </div>

        <div className={styles.value_container}>
          <div className={styles.value_name}>경매장가격</div>
          <input
            type="number"
            placeholder="경매장 판매가를 입력해주세요."
            //숫자 앞에 붙은 0 을 삭제합니다. 예를 들어, 023 인 경우 23 을 출력합니다.
            value={
              String(price) !== '0' ? String(price).replace(/(^0+)/, '') : price
            }
            className={styles.value_input}
            onChange={(event) => changeValue(event)}
          />
          <button className={styles.clear} onClick={() => clearValue()}>
            CLEAR
          </button>
        </div>

        <div className={styles.bep_container}>
          <div className={styles.bep_name}>손익분기점</div>
          <div className={styles.bep_circle_question_mark}>
            <FontAwesomeIcon icon={faCircleQuestion} />
            <div className={styles.bep_balloon}>
              <span className={styles.bep_explanation}>bep explanation1</span>
              <span className={styles.bep_explanation}>bep explanation2</span>
            </div>
          </div>
          <div
            className={styles.bep_value}
            onClick={() =>
              navigator.clipboard.writeText(String(bep)).then(notify)
            }
          >
            <span>{bepValue}</span>
          </div>
        </div>
        <div className={styles.profit_container}>
          <div className={styles.profit_name}>직전입찰가</div>
          <div className={styles.profit_circle_question_mark}>
            <FontAwesomeIcon icon={faCircleQuestion} />
            <span className={styles.profit_explanation}>explanation</span>
          </div>
          <div
            className={styles.profit_value}
            onClick={() =>
              navigator.clipboard.writeText(String(profit)).then(notify)
            }
          >
            {profitValue}
          </div>
        </div>
        <div className={styles.rec_container}>
          <div className={styles.rec_name}>입찰선점가</div>
          <div className={styles.rec_circle_question_mark}>
            <FontAwesomeIcon icon={faCircleQuestion} />
            <span className={styles.rec_explanation}>explanation</span>
          </div>
          <div
            className={styles.rec_value}
            onClick={() =>
              navigator.clipboard.writeText(String(rec)).then(notify)
            }
          >
            {recValue}
          </div>
        </div>
      </div>
      <ToastContainer />
    </div>
  );
};

export default Auction;
