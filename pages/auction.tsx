import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Auction.module.css';
import React, { useState, useEffect } from 'react';

const Auction: NextPage = () => {
  //경매장 판매가
  const [price, setPrice] = useState(0);

  //손익분기점(Break-Even Point), 초과 입찰시 손해
  const [bep, setBep] = useState(0);
  //이익(Profit)이 많이 남는 입찰가
  const [profit, setProfit] = useState(0);
  //추천가(Recommend, 이익이 많이 남는 입찰가보다 소폭 높은 가격으로, 추가 입찰시 손해)
  const [rec, setRec] = useState(0);

  //인원수(Headcount)
  const [hc, setHc] = useState(8);

  useEffect(() => {
    //판매 수수료를 제외한 순수익(Net Income)
    const netIncome = price * 0.95;
    const breakEvenPoint = netIncome - netIncome / hc;
    setBep(Math.round(breakEvenPoint));
    setProfit(Math.round(breakEvenPoint / 1.1));
    setRec(
      Math.ceil(breakEvenPoint / 1.1 + Math.round(breakEvenPoint) * 0.005),
    );
  }, [price, hc]);

  const changeValue = (event: React.ChangeEvent<HTMLInputElement>) => {
    const numberValue = Number(event.target.value);
    if (numberValue !== NaN) {
      setPrice(numberValue);
      console.log(numberValue);
    }
  };

  const clearValue = () => {
    setPrice(0);
    setProfit(0);
    setRec(0);
  };

  return (
    <div className={styles.container}>
      <div className={styles.box}>
        <Head>
          <title>LostArk Calculator</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <div className={styles.hc_button_container}>
          <button className={styles.hc_button} onClick={() => setHc(4)}>
            4인
          </button>
          <button className={styles.hc_button} onClick={() => setHc(8)}>
            8인
          </button>
          <button className={styles.hc_button} onClick={() => setHc(16)}>
            16인
          </button>
          <input
            type="number"
            placeholder="인원수"
            className={styles.hc_input}
            onChange={(event) => setHc(Number(event.target.value))}
          />
        </div>

        <div className={styles.value_button_container}>
          <button
            className={styles.value_button}
            onClick={() => setPrice(price + 5000)}
          >
            + 5000
          </button>
          <button
            className={styles.value_button}
            onClick={() => setPrice(price + 1000)}
          >
            + 1000
          </button>
          <button
            className={styles.value_button}
            onClick={() => setPrice(price + 500)}
          >
            + 500
          </button>
          <button
            className={styles.value_button}
            onClick={() => setPrice(price + 100)}
          >
            + 100
          </button>
          <button
            className={styles.value_button}
            onClick={() => setPrice(price + 50)}
          >
            + 50
          </button>
          <button
            className={styles.value_button}
            onClick={() => setPrice(price + 10)}
          >
            + 10
          </button>
        </div>

        <div>
          <input
            type="number"
            //숫자 앞에 붙은 0 을 삭제합니다. 예를 들어, 023 인 경우 23 을 출력합니다.
            value={
              String(price) !== '0' ? String(price).replace(/(^0+)/, '') : price
            }
            onChange={(event) => changeValue(event)}
          />
          <button onClick={() => clearValue()}>Clear</button>
        </div>

        <div>
          {price > 59 || price === 0 ? bep : '입찰하는 것이 손해입니다.'}
        </div>
        <div>
          {price > 59 || price === 0 ? profit : '입찰하는 것이 손해입니다.'}
        </div>
        <div>
          {price > 59 || price === 0 ? rec : '입찰하는 것이 손해입니다.'}
        </div>
      </div>
    </div>
  );
};

export default Auction;
